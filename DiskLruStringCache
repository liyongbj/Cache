public class DiskLruStringCache implements StringCache {
	private DiskLruCache mDiskCache;
	private static int IO_BUFFER_SIZE = 8 * 1024;
	private static final int APP_VERSION = 1;
	private static final int VALUE_COUNT = 1;

	public DiskLruStringCache(Context context, String uniqueName, int diskCacheSize) {
		try {
			final File diskCacheDir = getDiskCacheDir(context, uniqueName);
			mDiskCache = DiskLruCache.open(diskCacheDir, APP_VERSION, VALUE_COUNT, diskCacheSize);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private int writeStringToFile(String bitmap, DiskLruCache.Editor editor) throws IOException, FileNotFoundException {
		OutputStream out = null;
		try {
			byte[] bytes = bitmap.getBytes();
			int length = bytes.length;
			out = new BufferedOutputStream(editor.newOutputStream(0), IO_BUFFER_SIZE);
			out.write(bytes);
			out.flush();
			return length;
		} finally {
			if (out != null) {
				out.close();
			}
		}
	}

	private File getDiskCacheDir(Context context, String uniqueName) {

		final String cachePath = context.getCacheDir().getPath();
		return new File(cachePath + File.separator + uniqueName);
	}

	@Override
	public void putString(String key, String data) {
		DiskLruCache.Editor editor = null;
		try {
			key = createKey(key);
			editor = mDiskCache.edit(key);
			if (editor == null) {
				return;
			}

			if (writeStringToFile(data, editor) > 0) {
				mDiskCache.flush();
				editor.commit();
				// if (BuildConfig.DEBUG) {
				Log.d("cache_test_DISK_", "string put on disk cache " + key);
				// }
			} else {
				editor.abort();
				// if (BuildConfig.DEBUG) {
				Log.d("cache_test_DISK_", "ERROR on: string put on disk cache " + key);
				// }
			}
		} catch (IOException e) {
			// if (BuildConfig.DEBUG) {
			Log.d("cache_test_DISK_", "ERROR on: string put on disk cache " + key);
			// }
			try {
				if (editor != null) {
					editor.abort();
				}
			} catch (IOException ignored) {
			}
		}

	}

	@Override
	public String getString(String key) {
		String string = null;
		StringBuffer stringBuffer = new StringBuffer();
		BufferedReader reader = null;
		DiskLruCache.Snapshot snapshot = null;

		try {
			key = createKey(key);
			snapshot = mDiskCache.get(key);
			if (snapshot == null) {
				return null;
			}

			final InputStream in = snapshot.getInputStream(0);
			if (in != null) {
				final BufferedInputStream buffIn = new BufferedInputStream(in, IO_BUFFER_SIZE);
				reader = new BufferedReader(new InputStreamReader(buffIn));
				while (reader.ready()) {
					stringBuffer.append((char) reader.read());
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (reader != null) {
				// try {
				// reader.close();
				// } catch (IOException e) {
				// e.printStackTrace();
				// }
			}
			if (snapshot != null) {
				snapshot.close();
			}
		}

		// if (BuildConfig.DEBUG) {
		Log.d("cache_test_DISK_", string == null ? "" : "string read from disk " + key);
		// }

		return stringBuffer.toString();

	}

	public boolean containsKey(String key) {

		boolean contained = false;
		DiskLruCache.Snapshot snapshot = null;
		try {
			snapshot = mDiskCache.get(key);
			contained = snapshot != null;
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (snapshot != null) {
				snapshot.close();
			}
		}

		return contained;

	}

	public void clearCache() {
		// if (BuildConfig.DEBUG) {
		// Log.d("cache_test_DISK_", "disk cache CLEARED");
		// }
		try {
			mDiskCache.delete();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public File getCacheFolder() {
		return mDiskCache.getDirectory();
	}

	private String createKey(String url) {
		return String.valueOf(url.hashCode());
	}
}
